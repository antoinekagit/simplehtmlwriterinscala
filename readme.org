* Simple HTML writer in Scala

** Goals

- write HTML from Scala
- simple and customizable library
- short and pretty user syntax

Why ? Because it is not good to handwrite HTML. The power of a programming language (Scala) allows to automatize simply, saving your time and preventing mistakes.

** Syntax example

#+BEGIN_SRC scala
val indexHTML = html(
  head(
    meta(charset := "UTF-8"), title("Index"),
    style("span.bold { font-weight: bold }")),
  body(
    h1("Index"),
    h2(id := "second-title")("Post list:"),
    ul {
      for (p <- posts filter (_.author.nonEmpty) map postToHTML)
      yield li(p) },
    if ("today" != "yesterday") empty else footer("this is footer")))
#+END_SRC

   You will find a more complete one in [[./example/]] section

** Features

In less than 150 simple lines (counting comments) the library provides these features :

*** Short and pretty syntax

Syntaxic sugar is provided so you can write the previous code like this :

#+BEGIN_SRC scala
val mySpan = span(id := "span-12")("hey")
val myDiv = div(br())
val myImg = img(src := "my-img.jpg", alt := "some-text")
#+END_SRC

Here ~span~ and ~img~ are builders of the ~Basic~ classes above.
You just have to add the import of ~HTML5~ object (see below or example).

*** String, sequences, empty nodes and implicits

Strings are added like this ~StrData("my-string")~.

You will often need to write or return a value which is a sequence of HTML nodes, but not necessarily wrapped by an HTML node. For this you can use ~SeqNode~ like this ~SeqNode(Seq(span(...), br(), ul()))~.

You may also need the empty node ~empty~ value like in ~if (myCondition) then span(...) else empty~.

To prevent having to write ~StrData~ and ~SeqNode~, you can import the ~Implicits~ object (see below). Automatic conversion will be done everywhere it is possible. So ~span(StrData("my-string"))~ becomes ~span("my-string")~, and ~div(SeqNode(List(span(...), br(), ul())))~ becomes ~div(List(span(...), br(), ul()))~.

*** Simple basic classes

The library is built on very simple basic classes :

#+BEGIN_SRC scala
val myIdAttr = AttrStr("id", "span-12")
val mySpan = Node("span", Seq(myIdAttr), Seq(StrData("hey")))
val myDiv = Node("div", Seq.empty, Seq(Leaf("br", Seq.empty)))
val myImg = Leaf("img", Seq(
              AttrStr("src", "my-img.jpg"), AttrStr("alt", "some-text")))
#+END_SRC

All the control structures (~if~, ~map~, ...) are provided by the Scala standard library. They are powerful and you already know them. 

*** Html5

A collection of definitions for HTML5 is available in this object. Attributes are in the ~Attr~ sub-object because CSS attributes have common names.

** Example

There is a little example with the writing of some simple blog posts. You can find it in the [[./example]] directory.

** Future features
   
- other kind of attributes classes (enum kind, for example for the ~position~ CSS attribute)
- propose pretty printing
- exploration methods (more specific than scala standard ones)
- more complete covering of Html5
- propose special characters checking

** Architecture

Here are the four little objects of the library :

*** Basic

Basic classes for building nodes and attributes. Simply case classes with overrided ~toString~ method.

*** LessStrict

~Basic~ classes builders for less strict API syntax, meant for ~Html5~ object (see below). Simple overloading of ~apply~ method and an operator ~:=~ for attributes.

*** Implicits

Two implicits conversions for convenience. They are separated so you do not get them by surprise.

*** Html5

A collection of aliases for HTML5. It is not exhaustive but it is very easy to add items you miss. It is using ~LessStrict~ classes.

** Help

Feel free to give any suggest or remark. Thanks you for any bug reported.

** Inspiration

Syntax for attributes is inspired from https://github.com/lihaoyi/scalatags.

I found the image for the example on https://cutefunnyanimalz.blogspot.fr/

[[./example/example-image.jpg]]
